[{"C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\index.js":"1","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\App.js":"2","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\reportWebVitals.js":"3","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\RadioPlayer.jsx":"4","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\Dashboard.jsx":"5","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\RadioProfile.jsx":"6","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\EditProfile.jsx":"7","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\AddProfile.jsx":"8","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\Login.jsx":"9","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\AdminLogin.jsx":"10","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\LocalPlayer.jsx":"11","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\Footer.jsx":"12","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\Header.jsx":"13","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\History.jsx":"14"},{"size":288,"mtime":1718775942040,"results":"15","hashOfConfig":"16"},{"size":2059,"mtime":1719036640418,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1695848147000,"results":"18","hashOfConfig":"16"},{"size":17662,"mtime":1720169890902,"results":"19","hashOfConfig":"16"},{"size":13155,"mtime":1719247786470,"results":"20","hashOfConfig":"16"},{"size":12448,"mtime":1720167111907,"results":"21","hashOfConfig":"16"},{"size":6841,"mtime":1718992211129,"results":"22","hashOfConfig":"16"},{"size":6641,"mtime":1718992072941,"results":"23","hashOfConfig":"16"},{"size":3114,"mtime":1718992459064,"results":"24","hashOfConfig":"16"},{"size":3510,"mtime":1719038985739,"results":"25","hashOfConfig":"16"},{"size":18353,"mtime":1720169859831,"results":"26","hashOfConfig":"16"},{"size":778,"mtime":1720170425021,"results":"27","hashOfConfig":"16"},{"size":1596,"mtime":1718966330073,"results":"28","hashOfConfig":"16"},{"size":3646,"mtime":1718992268291,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"28ien8",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"33"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"33"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"33"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"33"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"33"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"33"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\index.js",[],[],[],"C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\App.js",[],[],"C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\RadioPlayer.jsx",["82","83","84","85","86","87","88","89"],[],"import React, { useRef, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams, Link, useNavigate } from 'react-router-dom';\r\nimport { differenceInHours } from 'date-fns';\r\nimport Footer from './Footer';\r\nimport Header from './Header';\r\n\r\nconst RadioPlayer = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const audioRef = useRef(null);\r\n  const scheduledTrackRef = useRef(null);\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  const [volume, setVolume] = useState(1);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\r\n  const [tracks, setTracks] = useState([]);\r\n  const [schedule, setSchedule] = useState([]);\r\n  const [newTrack, setNewTrack] = useState('');\r\n  const [newTime, setNewTime] = useState('');\r\n  const [alarmName, setAlarmName] = useState(''); // New state for alarm name\r\n  const [currentTime, setCurrentTime] = useState(new Date().toLocaleTimeString('en-GB', { hour12: false }));\r\n  const [profile, setProfile] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [userInteracted, setUserInteracted] = useState(false);\r\n  const [playingTrack, setPlayingTrack] = useState(null);\r\n  const [highlightEndTime, setHighlightEndTime] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchRadioProfile();\r\n    fetchTracks();\r\n    fetchSchedule();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const now = new Date().toLocaleTimeString('en-GB', { hour12: false });\r\n      setCurrentTime(now);\r\n      const scheduledTrack = schedule.find(track => track.time === now);\r\n      if (scheduledTrack) {\r\n        playScheduledTrack(scheduledTrack.track);\r\n      }\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [schedule, profile, currentTime]);\r\n\r\n  useEffect(() => {\r\n    if (!profile) return;\r\n\r\n    const audioElement = audioRef.current;\r\n    if (!audioElement) return;\r\n\r\n    const handleAudioError = () => {\r\n      console.error('Stream error, attempting to reload the stream...');\r\n    };\r\n\r\n    const handleOnline = () => {\r\n      console.log('Internet connection restored, refreshing the page...');\r\n      setIsOnline(true);\r\n      window.location.reload(true);\r\n    };\r\n\r\n    const handleOffline = () => {\r\n      console.log('Internet connection lost.');\r\n      setIsOnline(false);\r\n    };\r\n\r\n    audioElement.addEventListener('error', handleAudioError);\r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n\r\n    audioElement.muted = false;\r\n    setIsMuted(false);\r\n\r\n    return () => {\r\n      audioElement.removeEventListener('error', handleAudioError);\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n    };\r\n  }, [profile]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      preloadNextTrack();\r\n    }, 5000); // Check every 5 seconds to preload the next track\r\n    return () => clearInterval(interval);\r\n  }, [schedule, currentTime]);\r\n\r\n  const fetchRadioProfile = async () => {\r\n    try {\r\n      const response = await axios.get(`/radiostreams/${id}`);\r\n      setProfile(response.data);\r\n    } catch (error) {\r\n      console.error('There was an error fetching the radio profile!', error);\r\n    }\r\n  };\r\n\r\n  const fetchTracks = () => {\r\n    axios.get(`/radio/${id}/tracks`)\r\n      .then(response => {\r\n        setTracks(response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error('There was an error fetching the tracks!', error);\r\n      });\r\n  };\r\n\r\n  const fetchSchedule = () => {\r\n    axios.get(`/radio/${id}/schedule`)\r\n      .then(response => {\r\n        setSchedule(response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error('There was an error fetching the schedule!', error);\r\n      });\r\n  };\r\n\r\n  const handlePlay = () => {\r\n    if (!profile || profile.blocked) return;\r\n\r\n    const audioElement = audioRef.current;\r\n    setIsLoading(true);\r\n    audioElement.src = profile.url;\r\n    audioElement.load();\r\n    audioElement.play().then(() => {\r\n      setIsLoading(false);\r\n    }).catch(error => {\r\n      console.error('Error attempting to play the stream:', error);\r\n      setIsLoading(true);\r\n    });\r\n  };\r\n\r\n  const handleUserInteraction = () => {\r\n    setUserInteracted(true);\r\n    handlePlay(); // Automatically play when the user interacts\r\n  };\r\n\r\n  const handleMute = () => {\r\n    if (!audioRef.current) return;\r\n    audioRef.current.muted = !audioRef.current.muted;\r\n    setIsMuted(!isMuted);\r\n  };\r\n\r\n  const handleVolumeChange = (event) => {\r\n    const newVolume = event.target.value;\r\n    if (!audioRef.current) return;\r\n    audioRef.current.volume = newVolume;\r\n    setVolume(newVolume);\r\n  };\r\n\r\n  const playScheduledTrack = (track) => {\r\n    if (!profile || profile.alarmBlocked || !audioRef.current || !scheduledTrackRef.current) return;\r\n\r\n    setPlayingTrack(track);\r\n    fadeOut(audioRef.current, () => {\r\n      scheduledTrackRef.current.src = `/uploads/tracks/${track}`;\r\n      console.log('Track source set to:', scheduledTrackRef.current.src);\r\n      scheduledTrackRef.current.load();\r\n      scheduledTrackRef.current.oncanplaythrough = () => {\r\n        scheduledTrackRef.current.play().catch(error => {\r\n          console.error('Error playing track:', error);\r\n        });\r\n      };\r\n      scheduledTrackRef.current.onended = () => {\r\n        setPlayingTrack(null);\r\n        fadeIn(audioRef.current);\r\n        audioRef.current.play();\r\n      };\r\n\r\n      // Calculate the end time for highlighting\r\n      const trackDuration = scheduledTrackRef.current.duration * 1000; // duration in milliseconds\r\n      const endTime = new Date().getTime() + trackDuration + 20000; // add 20 seconds\r\n      setHighlightEndTime(endTime);\r\n    });\r\n  };\r\n\r\n  const fadeOut = (audio, callback) => {\r\n    let volume = 1.0;\r\n    const fadeAudio = setInterval(() => {\r\n      if (volume > 0.1) {\r\n        volume -= 0.1;\r\n        audio.volume = volume;\r\n      } else {\r\n        clearInterval(fadeAudio);\r\n        audio.volume = 0;\r\n        callback();\r\n      }\r\n    }, 200);\r\n  };\r\n\r\n  const fadeIn = (audio) => {\r\n    let volume = 0;\r\n    const fadeAudio = setInterval(() => {\r\n      if (volume < 0.9) {\r\n        volume += 0.1;\r\n        audio.volume = volume;\r\n      } else {\r\n        clearInterval(fadeAudio);\r\n        audio.volume = 1.0;\r\n      }\r\n    }, 200);\r\n  };\r\n\r\n  const preloadNextTrack = () => {\r\n    const now = new Date();\r\n    const futureTracks = schedule.filter(track => {\r\n      const [hours, minutes, seconds] = track.time.split(':').map(Number);\r\n      const trackTime = new Date();\r\n      trackTime.setHours(hours, minutes, seconds);\r\n      return trackTime > now;\r\n    });\r\n\r\n    if (futureTracks.length > 0) {\r\n      const nextTrack = futureTracks[0];\r\n      const nextTrackTime = new Date();\r\n      const [hours, minutes, seconds] = nextTrack.time.split(':').map(Number);\r\n      nextTrackTime.setHours(hours, minutes, seconds);\r\n\r\n      // Preload the track 60 seconds before the scheduled time\r\n      if (nextTrackTime - now <= 60000 && scheduledTrackRef.current.src !== `/uploads/tracks/${nextTrack.track}`) {\r\n        scheduledTrackRef.current.src = `/uploads/tracks/${nextTrack.track}`;\r\n        scheduledTrackRef.current.load();\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAddTrack = () => {\r\n    const newSchedule = { track: newTrack, time: newTime, alarmName }; // Include alarm name\r\n    const updatedSchedule = [...schedule, newSchedule];\r\n    setSchedule(updatedSchedule);\r\n    axios.post(`/radio/${id}/schedule`, updatedSchedule)\r\n      .then(response => {\r\n        console.log('Schedule saved to server');\r\n      })\r\n      .catch(error => {\r\n        console.error('Error saving schedule to server', error);\r\n      });\r\n    setNewTrack('');\r\n    setNewTime('');\r\n    setAlarmName(''); // Clear alarm name input\r\n  };\r\n\r\n  const getDaysLeft = (expirationDate, createdDate, subscriptionPlan) => {\r\n    const now = new Date();\r\n    const created = new Date(createdDate);\r\n    const expiration = new Date(expirationDate);\r\n\r\n    let subscriptionDays = 0;\r\n    switch (subscriptionPlan) {\r\n      case '1 Day':\r\n        subscriptionDays = 1;\r\n        break;\r\n      case '1 Month':\r\n        subscriptionDays = 30;\r\n        break;\r\n      case '3 Months':\r\n        subscriptionDays = 90;\r\n        break;\r\n      case '6 Months':\r\n        subscriptionDays = 180;\r\n        break;\r\n      case '1 Year':\r\n        subscriptionDays = 365;\r\n        break;\r\n      default:\r\n        subscriptionDays = 0;\r\n    }\r\n\r\n    const hoursPassed = differenceInHours(now, created);\r\n    const daysPassed = Math.ceil(hoursPassed / 24);\r\n    const daysLeft = subscriptionDays - daysPassed;\r\n\r\n    // console.log(`Current Date: ${now}`);\r\n    // console.log(`Created Date: ${created}`);\r\n    // console.log(`Expiration Date: ${expiration}`);\r\n    // console.log(`Hours Passed: ${hoursPassed}`);\r\n    // console.log(`Days Passed (ceil): ${daysPassed}`);\r\n    // console.log(`Subscription Days: ${subscriptionDays}`);\r\n    // console.log(`Days Left: ${daysLeft}`);\r\n\r\n    return daysLeft;\r\n  };\r\n\r\n  const isNextToPlay = (scheduledTime) => {\r\n    const now = new Date();\r\n    const scheduledDate = new Date();\r\n    const [hours, minutes, seconds] = scheduledTime.split(':').map(Number);\r\n    scheduledDate.setHours(hours, minutes, seconds);\r\n    const differenceInMinutes = (scheduledDate - now) / 60000;\r\n    return differenceInMinutes >= 0 && differenceInMinutes <= 1;\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    navigate('/login');\r\n  };\r\n\r\n  if (!profile) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (profile.blocked) {\r\n    return (\r\n      <div className=\"container vh-100 d-flex flex-column align-items-center justify-content-center\">\r\n        <style>{`\r\n          .blocked-message {\r\n            color: red;\r\n            font-weight: bold;\r\n            font-size: 24px;\r\n          }\r\n        `}</style>\r\n        <div className=\"blocked-message\">Your profile is blocked.</div>\r\n        <div>{profile.companyName}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"d-flex flex-column vh-100\">\r\n        <div className=\"container flex-grow-1 d-flex flex-column\">\r\n          <style>{`\r\n            .radio-player {\r\n              background-color: white;\r\n              border-radius: 8px;\r\n              padding: 20px;\r\n              box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);\r\n              width: 450px;\r\n            }\r\n            .radio-player h1 {\r\n              font-size: 24px;\r\n              font-weight: bold;\r\n            }\r\n            .radio-player img {\r\n              max-width: 100%;\r\n              height: auto;\r\n              padding: 10px;\r\n              box-sizing: border-box;\r\n            }\r\n            .radio-player .form-control-range {\r\n              width: 100%;\r\n            }\r\n            .radio-player .btn {\r\n              width: 100%;\r\n            }\r\n            .radio-player .profile-info h2 {\r\n              margin-top: 20px;\r\n              font-size: 18px;\r\n              font-weight: bold;\r\n            }\r\n            .radio-player .profile-info p {\r\n              font-size: 16px;\r\n            }\r\n            .radio-player .list-group-item {\r\n              margin-top: 10px;\r\n              background-color: #f8f9fa;\r\n              border: 1px solid #dee2e6;\r\n              transition: background-color 0.3s, transform 0.3s;\r\n            }\r\n            .radio-player .list-group-item:hover {\r\n              background-color: #e9ecef;\r\n              transform: scale(1.02);\r\n            }\r\n            .radio-player .list-group-item.active {\r\n              background-color: #007bff;\r\n              color: white;\r\n            }\r\n            .action-buttons {\r\n              position: absolute;\r\n              top: 10px;\r\n              right: 10px;\r\n              display: flex;\r\n              gap: 10px;\r\n            }\r\n            .header {\r\n              text-align: center;\r\n              margin-bottom: 10px;\r\n            }\r\n            .header h1 {\r\n              font-size: 2rem;\r\n              margin-top: 20px;\r\n            }\r\n            .header h2 {\r\n              font-size: 1rem;\r\n              margin: 0;\r\n            }\r\n            .subscription-info {\r\n              text-align: center;\r\n              font-size: 1rem;\r\n              margin-top: 10px;\r\n            }\r\n            .card {\r\n              width: 100%;\r\n              background-color: #f8f9fa;\r\n              border: 1px solid #dee2e6;\r\n              box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);\r\n            }\r\n          `}</style>\r\n          <div className=\"action-buttons\">\r\n            {profile.alarmBlocked ? (\r\n              <button className=\"btn btn-primary\" disabled>Go to Profile</button>\r\n            ) : (\r\n              <Link to={`/radio/${id}/profile`}>\r\n                <button className=\"btn btn-primary\">Go to Profile</button>\r\n              </Link>\r\n            )}\r\n            <Link to={`/localplayer/${id}`}>\r\n              <button className=\"btn btn-info\">Go to Local Player</button>\r\n            </Link>\r\n            <button className=\"btn btn-secondary\" onClick={handleLogout}>Logout</button>\r\n          </div>\r\n          <div className=\"header\">\r\n          <h1>{profile.name} - {profile.companyName}</h1>\r\n            <div className=\"subscription-info\">\r\n              <p>Subscription Plan: {profile.subscriptionPlan}<br />\r\n              Days left to expire: {getDaysLeft(profile.expirationDate, profile.createdDate, profile.subscriptionPlan)}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"row flex-grow-1 align-items-start\">\r\n            <div className=\"col-md-6 d-flex justify-content-center\">\r\n              <div className=\"radio-player text-center\" onClick={handleUserInteraction}>\r\n                {profile.logo && <img src={`/uploads/${profile.logo}`} alt=\"Company Logo\" className=\"img-fluid mb-3\" />}\r\n                <audio ref={audioRef} preload=\"none\" style={{ display: 'none' }}></audio>\r\n                <div className=\"mb-3\">\r\n                  <button className=\"btn btn-danger btn-block mb-2\" onClick={handlePlay}>Live</button>\r\n                  <button className=\"btn btn-danger btn-block mb-2\" onClick={handleMute}>{isMuted ? 'Unmute' : 'Mute'}</button>\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                  <input\r\n                    type=\"range\"\r\n                    className=\"form-control-range\"\r\n                    min=\"0\"\r\n                    max=\"1\"\r\n                    step=\"0.01\"\r\n                    value={volume}\r\n                    onChange={handleVolumeChange}\r\n                  />\r\n                </div>\r\n                {isLoading && <p>Connecting...</p>}\r\n                {!isOnline && <p>No connection.</p>}\r\n                {errorMessage && <p>{errorMessage}</p>}\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-6 d-flex justify-content-center\">\r\n              {profile.alarmBlocked ? (\r\n                <div className=\"card text-center p-4\">\r\n                  <div className=\"card-header\">\r\n                    <h2>Alarm System is blocked</h2>\r\n                  </div>\r\n                  <p style={{ color: 'red', fontWeight: 'bold' }}>The alarm system for this profile is currently blocked.</p>\r\n                </div>\r\n              ) : (\r\n                <div className=\"card text-center p-4\">\r\n                  <div className=\"card-header\">\r\n                    <h2>Scheduled Tracks</h2>\r\n                    <div className=\"scheduled-player\">\r\n                    <br></br>\r\n                    <audio ref={scheduledTrackRef} controls preload=\"none\" style={{ width: '100%' }}></audio> {/* Scheduled track player */}\r\n                  </div>\r\n                  </div>\r\n                  <ul className=\"list-group list-group-flush\">\r\n                    {schedule.map((item, index) => {\r\n                      const isPlaying = item.track === playingTrack;\r\n                      const isHighlighted = highlightEndTime && new Date().getTime() < highlightEndTime;\r\n                      return (\r\n                        <li\r\n                          key={index}\r\n                          className={`list-group-item d-flex justify-content-between align-items-center ${isPlaying || isHighlighted ? 'bg-warning' : ''}`}\r\n                          style={isNextToPlay(item.time) ? { fontWeight: 'bold', backgroundColor: '#ffecb3' } : {}}\r\n                        >\r\n                          <span\r\n                            className=\"dot\"\r\n                            style={{\r\n                              height: '10px',\r\n                              width: '10px',\r\n                              backgroundColor: '#ff0000',\r\n                              borderRadius: '50%',\r\n                              display: 'inline-block',\r\n                              marginRight: '10px'\r\n                            }}\r\n                          ></span>\r\n                          {item.time}  - {item.alarmName} {/* Display alarm name */}\r\n                          {/* {item.track.split('-').slice(1).join('-')} */}\r\n                        </li>\r\n                      );\r\n                    })}\r\n                  </ul>\r\n                 \r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <br />\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RadioPlayer;\r\n","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\Dashboard.jsx",["90","91","92"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { differenceInDays, differenceInHours } from 'date-fns';\r\nimport Footer from './Footer';\r\nimport Header from './Header';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { Oval } from 'react-loader-spinner';\r\n\r\nconst Dashboard = () => {\r\n  const [radioStreams, setRadioStreams] = useState([]);\r\n  const [currentTime, setCurrentTime] = useState(new Date());\r\n  const [loading, setLoading] = useState(false);\r\n  const [alarmLoading, setAlarmLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n  const token = localStorage.getItem('adminToken'); // Retrieve token from localStorage\r\n\r\n  useEffect(() => {\r\n    if (!token) {\r\n      navigate('/admin/login');\r\n    } else {\r\n      fetchRadioStreams();\r\n    }\r\n    const timer = setInterval(() => {\r\n      setCurrentTime(new Date());\r\n    }, 1000);\r\n\r\n    return () => clearInterval(timer); // Cleanup interval on unmount\r\n  }, [token]);\r\n\r\n  const fetchRadioStreams = () => {\r\n    setLoading(true);\r\n    axios.get('/radiostreams', {\r\n      headers: { 'Authorization': `Bearer ${token}` }\r\n    })\r\n      .then(response => {\r\n        setRadioStreams(response.data);\r\n        setLoading(false);\r\n      })\r\n      .catch(error => {\r\n        setLoading(false);\r\n        if (error.response && error.response.status === 401) {\r\n          handleLogout();\r\n        } else {\r\n          toast.error('There was an error fetching the radio streams!');\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleBlock = (id) => {\r\n    setLoading(true);\r\n    axios.put(`/radiostreams/${id}/block`, {}, {\r\n      headers: { 'Authorization': `Bearer ${token}` }\r\n    })\r\n      .then(response => {\r\n        fetchRadioStreams(); // Refresh the list after blocking\r\n      })\r\n      .catch(error => {\r\n        setLoading(false);\r\n        if (error.response && error.response.status === 401) {\r\n          handleLogout();\r\n        } else {\r\n          toast.error('There was an error blocking the radio stream!');\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleUnblock = (id) => {\r\n    setLoading(true);\r\n    axios.put(`/radiostreams/${id}/unblock`, {}, {\r\n      headers: { 'Authorization': `Bearer ${token}` }\r\n    })\r\n      .then(response => {\r\n        fetchRadioStreams(); // Refresh the list after unblocking\r\n      })\r\n      .catch(error => {\r\n        setLoading(false);\r\n        if (error.response && error.response.status === 401) {\r\n          handleLogout();\r\n        } else {\r\n          toast.error('There was an error unblocking the radio stream!');\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleBlockAlarm = (id) => {\r\n    setAlarmLoading(true);\r\n    axios.put(`/radiostreams/${id}/block-alarm`, {}, {\r\n      headers: { 'Authorization': `Bearer ${token}` }\r\n    })\r\n      .then(response => {\r\n        fetchRadioStreams(); // Refresh the list after blocking alarm system\r\n        setAlarmLoading(false);\r\n        toast.success('Alarm blocked successfully');\r\n      })\r\n      .catch(error => {\r\n        setAlarmLoading(false);\r\n        if (error.response && error.response.status === 401) {\r\n          handleLogout();\r\n        } else {\r\n          toast.error('There was an error blocking the alarm system!');\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleUnblockAlarm = (id) => {\r\n    setAlarmLoading(true);\r\n    axios.put(`/radiostreams/${id}/unblock-alarm`, {}, {\r\n      headers: { 'Authorization': `Bearer ${token}` }\r\n    })\r\n      .then(response => {\r\n        fetchRadioStreams(); // Refresh the list after unblocking alarm system\r\n        setAlarmLoading(false);\r\n        toast.success('Alarm unblocked successfully');\r\n      })\r\n      .catch(error => {\r\n        setAlarmLoading(false);\r\n        if (error.response && error.response.status === 401) {\r\n          handleLogout();\r\n        } else {\r\n          toast.error('There was an error unblocking the alarm system!');\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleRenewSubscription = (stream) => {\r\n    setLoading(true);\r\n    axios.put(`/radiostreams/${stream.id}/paid`, {}, {\r\n      headers: { 'Authorization': `Bearer ${token}` }\r\n    })\r\n      .then(response => {\r\n        fetchRadioStreams(); // Refresh the list after renewing subscription\r\n      })\r\n      .catch(error => {\r\n        setLoading(false);\r\n        if (error.response && error.response.status === 401) {\r\n          handleLogout();\r\n        } else {\r\n          toast.error('There was an error renewing the subscription!');\r\n        }\r\n      });\r\n  };\r\n\r\n  const getSubscriptionDays = (plan) => {\r\n    switch (plan) {\r\n      case '1 Day':\r\n        return 1;\r\n      case '1 Month':\r\n        return 30;\r\n      case '3 Months':\r\n        return 90;\r\n      case '6 Months':\r\n        return 180;\r\n      case '1 Year':\r\n        return 365;\r\n      default:\r\n        return 0;\r\n    }\r\n  };\r\n\r\n  const getDaysLeft = (createdDate, subscriptionPlan) => {\r\n    const now = new Date();\r\n    const created = new Date(createdDate);\r\n\r\n    // Calculate the exact hours difference\r\n    const hoursDifference = differenceInHours(now, created);\r\n\r\n    // Calculate elapsed days considering partial days as full days\r\n    const elapsedDays = Math.ceil(hoursDifference / 24);\r\n\r\n    const subscriptionDays = getSubscriptionDays(subscriptionPlan);\r\n    let daysLeft = subscriptionDays - elapsedDays;\r\n\r\n    if (daysLeft < 0) {\r\n      daysLeft -= 1; // Adjust to start from -1 instead of 0\r\n    }\r\n\r\n    return daysLeft;\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('adminToken');\r\n    navigate('/admin/login');\r\n  };\r\n\r\n  // Sort radio streams by days left\r\n  const sortedRadioStreams = radioStreams.sort((a, b) => {\r\n    const daysLeftA = getDaysLeft(new Date(a.createdDate), a.subscriptionPlan);\r\n    const daysLeftB = getDaysLeft(new Date(b.createdDate), b.subscriptionPlan);\r\n    return daysLeftA - daysLeftB;\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"container mt-4 dashboard-container\">\r\n        <style jsx>{`\r\n          .dashboard-container {\r\n            background-color: #f8f9fa;\r\n            padding: 20px;\r\n            border-radius: 8px;\r\n            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);\r\n            font-family: 'Roboto', sans-serif;\r\n            background: linear-gradient(135deg, #f3f4f6, #f9fafb);\r\n          }\r\n          .dashboard-container h2 {\r\n            color: #007bff;\r\n            margin-bottom: 20px;\r\n            font-weight: 700;\r\n            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);\r\n          }\r\n          .card {\r\n            border: none;\r\n            border-radius: 8px;\r\n          }\r\n          .dashboard-card {\r\n            background: linear-gradient(145deg, #e2ebf0, #f9f9f9);\r\n            border-radius: 12px;\r\n            box-shadow: 7px 7px 14px #c5c5c5, -7px -7px 14px #ffffff;\r\n          }\r\n          .list-group-item {\r\n            background-color: #ffffff;\r\n            border: 1px solid #dee2e6;\r\n            border-radius: 12px;\r\n            transition: transform 0.3s, box-shadow 0.3s;\r\n            margin-bottom: 20px;\r\n          }\r\n          .list-group-item:hover {\r\n            transform: scale(1.03);\r\n            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);\r\n          }\r\n          .btn-group {\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n          }\r\n          .btn-group .btn {\r\n            margin: 5px;\r\n            transition: background-color 0.3s, box-shadow 0.3s;\r\n          }\r\n          .btn-group .btn:hover {\r\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n          }\r\n          .text-primary {\r\n            color: #007bff !important;\r\n          }\r\n          .text-secondary {\r\n            color: #6c757d !important;\r\n          }\r\n          .card .card-header {\r\n            background-color: #007bff;\r\n            color: #ffffff;\r\n            border-bottom: 1px solid #dee2e6;\r\n            border-radius: 12px 12px 0 0;\r\n          }\r\n          .card .card-header h2 {\r\n            margin: 0;\r\n            font-size: 1.25rem;\r\n          }\r\n          .list-group-item .btn-group .btn {\r\n            margin-right: 0.5rem;\r\n          }\r\n          .list-group-item .btn-group .btn:last-child {\r\n            margin-right: 0;\r\n          }\r\n          .list-group-item .btn-group .btn-warning {\r\n            background-color: #ffc107;\r\n            border-color: #ffc107;\r\n          }\r\n          .list-group-item .btn-group .btn-info {\r\n            background-color: #17a2b8;\r\n            border-color: #17a2b8;\r\n          }\r\n          .list-group-item .btn-group .btn-secondary {\r\n            background-color: #6c757d;\r\n            border-color: #6c757d;\r\n          }\r\n          .btn:disabled {\r\n            cursor: not-allowed;\r\n            opacity: 0.6;\r\n          }\r\n          .btn-history {\r\n            margin-right: 10px;\r\n          }\r\n          .spinnerContainer {\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            background-color: rgba(255, 255, 255, 0.8);\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            z-index: 1000;\r\n          }\r\n        `}</style>\r\n        {loading && (\r\n          <div className=\"spinnerContainer\">\r\n            <Oval\r\n              height={50}\r\n              width={50}\r\n              color=\"#007bff\"\r\n              wrapperStyle={{}}\r\n              wrapperClass=\"\"\r\n              visible={true}\r\n              ariaLabel=\"oval-loading\"\r\n              secondaryColor=\"#007bff\"\r\n              strokeWidth={2}\r\n              strokeWidthSecondary={2}\r\n            />\r\n          </div>\r\n        )}\r\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n          <h2 className=\"text-primary\">Radio Streams Dashboard</h2>\r\n          <div>\r\n            <Link to=\"/history\" className=\"btn btn-secondary btn-history\">History</Link>\r\n            <button className=\"btn btn-danger\" onClick={handleLogout}>Logout</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"card mb-4 p-3 shadow-sm dashboard-card\">\r\n          <div className=\"d-flex justify-content-between\">\r\n            <div>\r\n              <p className=\"mb-1\"><strong>Current Date:</strong> {currentTime.toLocaleDateString()}</p>\r\n              <p className=\"mb-1\"><strong>Current Time:</strong> {currentTime.toLocaleTimeString()}</p>\r\n            </div>\r\n            <Link to=\"/add\" className=\"btn btn-primary align-self-center\">Add New Radio Profile</Link>\r\n          </div>\r\n        </div>\r\n        <div className=\"list-group\">\r\n          {sortedRadioStreams.map((stream, index) => {\r\n            const daysLeft = getDaysLeft(new Date(stream.createdDate), stream.subscriptionPlan);\r\n\r\n            if (daysLeft <= -5 && !stream.alarmBlocked) {\r\n              handleBlockAlarm(stream.id);\r\n            }\r\n\r\n            return (\r\n              <div key={index} className=\"list-group-item list-group-item-action mb-3 shadow-sm\">\r\n                <h4 className=\"text-secondary\">{stream.companyName}</h4>\r\n                <p><strong>{stream.name}</strong> (Created: {new Date(stream.createdDate).toLocaleDateString()})</p>\r\n                <p><strong>Email:</strong> {stream.email}</p>\r\n                <p><strong>Subscription Plan:</strong> {stream.subscriptionPlan}</p>\r\n                <p><strong>Days left:</strong> {daysLeft}</p>\r\n                <div className=\"d-flex justify-content-between mt-3\">\r\n                  <div className=\"btn-group\">\r\n                    <Link to={`/radio/${stream.id}/edit`} className=\"btn btn-warning btn-sm mr-2\">Edit</Link>\r\n                    <Link to={`/radio/${stream.id}`} className=\"btn btn-info btn-sm mr-2\">Play</Link>\r\n                    <Link to={`/radio/${stream.id}/profile`} className=\"btn btn-secondary btn-sm mr-2\">Manage</Link>\r\n                  </div>\r\n                  <div className=\"btn-group\">\r\n                    {stream.blocked ? (\r\n                      <button className=\"btn btn-success btn-sm mr-2\" onClick={() => handleUnblock(stream.id)}>Unblock</button>\r\n                    ) : (\r\n                      <button className=\"btn btn-danger btn-sm mr-2\" onClick={() => handleBlock(stream.id)}>Block</button>\r\n                    )}\r\n                    {stream.alarmBlocked ? (\r\n                      <button className=\"btn btn-success btn-sm\" onClick={() => handleUnblockAlarm(stream.id)}>Unblock Alarm</button>\r\n                    ) : (\r\n                      <button className=\"btn btn-danger btn-sm\" onClick={() => handleBlockAlarm(stream.id)}>Block Alarm</button>\r\n                    )}\r\n                    {daysLeft <= 5 && (\r\n                      <button className=\"btn btn-primary btn-sm\" onClick={() => handleRenewSubscription(stream)}>Paid</button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      <br></br>\r\n      <Footer />\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\RadioProfile.jsx",["93"],[],"import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\nimport Footer from './Footer';\r\nimport Header from './Header';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { Oval } from 'react-loader-spinner';\r\n\r\nconst RadioProfile = () => {\r\n  const { id } = useParams();\r\n  const [file, setFile] = useState(null);\r\n  const [schedule, setSchedule] = useState([]);\r\n  const [tracks, setTracks] = useState([]);\r\n  const [newTrack, setNewTrack] = useState('');\r\n  const [newTime, setNewTime] = useState('');\r\n  const [alarmName, setAlarmName] = useState(''); // New state for alarm name\r\n  const [playingTrack, setPlayingTrack] = useState(null);\r\n  const [playingScheduledTrack, setPlayingScheduledTrack] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const audioRefs = useRef([]);\r\n  const scheduledAudioRefs = useRef([]);\r\n\r\n  useEffect(() => {\r\n    fetchSchedule();\r\n    fetchTracks();\r\n  }, []);\r\n\r\n  const fetchSchedule = () => {\r\n    setLoading(true);\r\n    axios.get(`/radio/${id}/schedule`)\r\n      .then(response => {\r\n        setSchedule(response.data);\r\n        setLoading(false);\r\n      })\r\n      .catch(error => {\r\n        toast.error('Error fetching schedule');\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const fetchTracks = () => {\r\n    setLoading(true);\r\n    axios.get(`/radio/${id}/tracks`)\r\n      .then(response => {\r\n        setTracks(response.data);\r\n        setLoading(false);\r\n      })\r\n      .catch(error => {\r\n        toast.error('Error fetching tracks');\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const handleFileChange = (e) => {\r\n    setFile(e.target.files[0]);\r\n  };\r\n\r\n  const handleUpload = () => {\r\n    if (!file) {\r\n      toast.error('Please select a file to upload');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    axios.post(`/radio/${id}/upload`, formData)\r\n      .then(response => {\r\n        toast.success('File uploaded successfully');\r\n        fetchTracks(); // Refresh tracks after upload\r\n        setLoading(false);\r\n      })\r\n      .catch(error => {\r\n        toast.error('File upload failed');\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const handleDeleteScheduleItem = (index) => {\r\n    setLoading(true);\r\n    const updatedSchedule = schedule.filter((_, i) => i !== index);\r\n    axios.post(`/radio/${id}/schedule`, updatedSchedule)\r\n      .then(response => {\r\n        setSchedule(updatedSchedule);\r\n        toast.success('Schedule updated successfully');\r\n        setLoading(false);\r\n      })\r\n      .catch(error => {\r\n        toast.error('Failed to update schedule');\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const handleDeleteTrack = (track) => {\r\n    const trackName = track.split('-').slice(1).join('-'); // Extract the track name after the first hyphen\r\n    setLoading(true);\r\n    axios.delete(`/radio/${id}/tracks/${trackName}`)\r\n      .then(response => {\r\n        toast.success('Track deleted successfully');\r\n        fetchTracks(); // Refresh tracks after deletion\r\n        setLoading(false);\r\n      })\r\n      .catch(error => {\r\n        toast.error('Failed to delete track');\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const handleAddTrack = () => {\r\n    if (!newTrack || !newTime || !alarmName) {\r\n      toast.error('Please select a track, time and enter alarm name');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    const newSchedule = { track: newTrack, time: newTime, alarmName }; // Include alarm name\r\n    const updatedSchedule = [...schedule, newSchedule];\r\n    axios.post(`/radio/${id}/schedule`, updatedSchedule)\r\n      .then(response => {\r\n        setSchedule(updatedSchedule);\r\n        toast.success('Track added to schedule');\r\n        setLoading(false);\r\n      })\r\n      .catch(error => {\r\n        toast.error('Error saving schedule');\r\n        setLoading(false);\r\n      });\r\n\r\n    setNewTrack('');\r\n    setNewTime('');\r\n    setAlarmName(''); // Clear alarm name input\r\n  };\r\n\r\n  const handlePlayPause = (index) => {\r\n    const audio = audioRefs.current[index];\r\n    if (audio.paused) {\r\n      audio.play();\r\n      setPlayingTrack(index);\r\n    } else {\r\n      audio.pause();\r\n      setPlayingTrack(null);\r\n    }\r\n  };\r\n\r\n  const handlePlayPauseScheduled = (index) => {\r\n    const audio = scheduledAudioRefs.current[index];\r\n    if (audio.paused) {\r\n      audio.play();\r\n      setPlayingScheduledTrack(index);\r\n    } else {\r\n      audio.pause();\r\n      setPlayingScheduledTrack(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"profilePage\">\r\n        <Header />\r\n        <div className=\"container mt-4\" style={styles.container}>\r\n          <h2 className=\"text-center text-primary mb-4\" style={styles.heading}>Manage Radio Stream</h2>\r\n          {loading && (\r\n            <div style={styles.spinnerContainer}>\r\n              <Oval\r\n                height={50}\r\n                width={50}\r\n                color=\"#007bff\"\r\n                wrapperStyle={{}}\r\n                wrapperClass=\"\"\r\n                visible={true}\r\n                ariaLabel='oval-loading'\r\n                secondaryColor=\"#007bff\"\r\n                strokeWidth={2}\r\n                strokeWidthSecondary={2}\r\n              />\r\n            </div>\r\n          )}\r\n          <div className=\"card mb-4 p-4 shadow-sm\" style={styles.card}>\r\n            <div className=\"mb-3\" style={styles.inputGroup}>\r\n              <input type=\"file\" className=\"form-control-file\" style={styles.fileInput} onChange={handleFileChange} />\r\n              <button className=\"btn btn-primary mt-2 btn-block\" style={styles.uploadButton} onClick={handleUpload}>Upload</button>\r\n            </div>\r\n\r\n            <h3 className=\"text-primary mb-3\" style={styles.subHeading}>Schedule Tracks</h3>\r\n            <div className=\"input-group mb-3\" style={styles.inputGroup}>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                style={styles.input}\r\n                placeholder=\"Enter time (HH:MM:SS)\"\r\n                value={newTime}\r\n                onChange={(e) => setNewTime(e.target.value)}\r\n              />\r\n              <select\r\n                className=\"form-control\"\r\n                style={styles.select}\r\n                value={newTrack}\r\n                onChange={(e) => setNewTrack(e.target.value)}\r\n              >\r\n                <option value=\"\">Select Track</option>\r\n                {tracks.map((track, index) => (\r\n                  <option key={index} value={track}>{track.split('-').slice(1).join('-')}</option>\r\n                ))}\r\n              </select>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                style={styles.input}\r\n                placeholder=\"Enter alarm name\"\r\n                value={alarmName}\r\n                onChange={(e) => setAlarmName(e.target.value)}\r\n              />\r\n              <div className=\"input-group-append\">\r\n                <button className=\"btn btn-primary\" style={styles.addButton} onClick={handleAddTrack}>Add</button>\r\n              </div>\r\n            </div>\r\n\r\n            <h3 className=\"text-primary mb-3\" style={styles.subHeading}>Scheduled Tracks</h3>\r\n            <ul className=\"list-group mb-3\" style={styles.listGroup}>\r\n              {schedule.map((item, index) => (\r\n                <li key={index} className=\"list-group-item d-flex justify-content-between align-items-center\" style={styles.listItem}>\r\n                  <span style={styles.trackName}>{item.time} - {item.track} - {item.alarmName}</span>\r\n                  <div style={styles.buttonGroup}>\r\n                    <audio ref={el => scheduledAudioRefs.current[index] = el} src={`/uploads/tracks/${item.track}`} />\r\n                    <button\r\n                      className=\"btn btn-success btn-sm\"\r\n                      style={styles.playPauseButton}\r\n                      onClick={() => handlePlayPauseScheduled(index)}\r\n                    >\r\n                      {playingScheduledTrack === index ? <i className=\"fas fa-pause\"></i> : <i className=\"fas fa-play\"></i>}\r\n                    </button>\r\n                    <button className=\"btn btn-danger btn-sm\" style={styles.deleteButton} onClick={() => handleDeleteScheduleItem(index)}>Delete</button>\r\n                  </div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n\r\n            <h3 className=\"text-primary mb-3\" style={styles.subHeading}>Uploaded Tracks</h3>\r\n            <ul className=\"list-group mb-3\" style={styles.listGroup}>\r\n              {tracks.map((track, index) => (\r\n                <li key={index} className=\"list-group-item d-flex justify-content-between align-items-center\" style={styles.listItem}>\r\n                  <span style={styles.trackName}>{track.split('-').slice(1).join('-')}</span>\r\n                  <div style={styles.buttonGroup}>\r\n                    <audio ref={el => audioRefs.current[index] = el} src={`/uploads/tracks/${track}`} />\r\n                    <button\r\n                      className=\"btn btn-success btn-sm\"\r\n                      style={styles.playPauseButton}\r\n                      onClick={() => handlePlayPause(index)}\r\n                    >\r\n                      {playingTrack === index ? <i className=\"fas fa-pause\"></i> : <i className=\"fas fa-play\"></i>}\r\n                    </button>\r\n                    <button className=\"btn btn-danger btn-sm\" style={styles.deleteButton} onClick={() => handleDeleteTrack(track)}>Delete</button>\r\n                  </div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <br></br><br></br> <br></br> <br></br><br></br> <br></br> <br></br>\r\n      <Footer />\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  profilePage: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    minHeight: '100vh'\r\n  },\r\n  container: {\r\n    backgroundColor: '#f8f9fa',\r\n    padding: '20px',\r\n    borderRadius: '8px',\r\n    boxShadow: '0 0 15px rgba(0, 0, 0, 0.1)',\r\n    maxWidth: '800px',\r\n    margin: '0 auto',\r\n    flexGrow: 1\r\n  },\r\n  heading: {\r\n    color: '#007bff',\r\n    marginBottom: '20px',\r\n    textAlign: 'center'\r\n  },\r\n  subHeading: {\r\n    color: '#007bff',\r\n    marginBottom: '20px'\r\n  },\r\n  inputGroup: {\r\n    marginBottom: '15px'\r\n  },\r\n  input: {\r\n    width: '100%',\r\n    padding: '10px',\r\n    marginBottom: '10px',\r\n    borderRadius: '4px',\r\n    border: '1px solid #ccc'\r\n  },\r\n  select: {\r\n    width: '100%',\r\n    padding: '10px',\r\n    marginBottom: '10px',\r\n    borderRadius: '4px',\r\n    border: '1px solid #ccc'\r\n  },\r\n  fileInput: {\r\n    display: 'block',\r\n    marginBottom: '10px'\r\n  },\r\n  uploadButton: {\r\n    display: 'block',\r\n    width: '100%',\r\n    padding: '10px',\r\n    backgroundColor: '#007bff',\r\n    color: '#fff',\r\n    border: 'none',\r\n    borderRadius: '4px',\r\n    cursor: 'pointer'\r\n  },\r\n  addButton: {\r\n    display: 'block',\r\n    width: '100%',\r\n    padding: '10px',\r\n    backgroundColor: '#007bff',\r\n    color: '#fff',\r\n    border: 'none',\r\n    borderRadius: '4px',\r\n    cursor: 'pointer'\r\n  },\r\n  deleteButton: {\r\n    backgroundColor: '#dc3545',\r\n    color: '#fff',\r\n    border: 'none',\r\n    borderRadius: '4px',\r\n    padding: '5px 10px',\r\n    cursor: 'pointer',\r\n    marginLeft: '5px'\r\n  },\r\n  playPauseButton: {\r\n    backgroundColor: '#28a745',\r\n    color: '#fff',\r\n    border: 'none',\r\n    borderRadius: '4px',\r\n    padding: '5px 10px',\r\n    cursor: 'pointer',\r\n    marginRight: '5px'\r\n  },\r\n  listGroup: {\r\n    listStyleType: 'none',\r\n    padding: '0'\r\n  },\r\n  listItem: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    padding: '10px',\r\n    marginBottom: '10px',\r\n    backgroundColor: '#fff',\r\n    border: '1px solid #dee2e6',\r\n    borderRadius: '4px',\r\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.1)'\r\n  },\r\n  buttonGroup: {\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n  },\r\n  trackName: {\r\n    flexGrow: 1,\r\n    marginRight: '10px'\r\n  },\r\n  spinnerContainer: {\r\n    position: 'fixed',\r\n    top: '0',\r\n    left: '0',\r\n    width: '100%',\r\n    height: '100%',\r\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    zIndex: '1000'\r\n  }\r\n};\r\n\r\nexport default RadioProfile;\r\n","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\EditProfile.jsx",["94"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport Footer from './Footer';\r\nimport Header from './Header';\r\n\r\nconst EditProfile = () => {\r\n  const { id } = useParams();\r\n  const [name, setName] = useState('');\r\n  const [url, setUrl] = useState('');\r\n  const [subscriptionPlan, setSubscriptionPlan] = useState('1 Day'); // Default to 1 Day\r\n  const [companyName, setCompanyName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [logo, setLogo] = useState(null);\r\n  const [currentLogo, setCurrentLogo] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    fetchRadioProfile();\r\n  }, []);\r\n\r\n  const fetchRadioProfile = async () => {\r\n    try {\r\n      const response = await axios.get(`/radiostreams/${id}`);\r\n      const { name, url, subscriptionPlan, companyName, email, logo } = response.data;\r\n      setName(name);\r\n      setUrl(url);\r\n      setSubscriptionPlan(subscriptionPlan);\r\n      setCompanyName(companyName);\r\n      setEmail(email);\r\n      setCurrentLogo(logo);\r\n    } catch (error) {\r\n      console.error('There was an error fetching the radio profile!', error);\r\n    }\r\n  };\r\n\r\n  const handleLogoChange = (e) => {\r\n    setLogo(e.target.files[0]);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append('name', name);\r\n    formData.append('url', url);\r\n    formData.append('subscriptionPlan', subscriptionPlan);\r\n    formData.append('companyName', companyName);\r\n    formData.append('email', email);\r\n    if (logo) {\r\n      formData.append('logo', logo);\r\n    }\r\n\r\n    try {\r\n      const response = await axios.put(`/radiostreams/${id}`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      console.log('Response:', response.data);\r\n      navigate('/');\r\n    } catch (error) {\r\n      console.error('There was an error updating the radio stream!', error.response?.data || error.message);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    try {\r\n      await axios.delete(`/radiostreams/${id}`);\r\n      navigate('/');\r\n    } catch (error) {\r\n      console.error('There was an error deleting the radio stream!', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"edit-profile-page\">\r\n        <style jsx>{`\r\n          .edit-profile-page {\r\n            display: flex;\r\n            flex-direction: column;\r\n            min-height: 100vh;\r\n          }\r\n          .edit-profile-container {\r\n            background-color: #f8f9fa;\r\n            padding: 20px;\r\n            border-radius: 8px;\r\n            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);\r\n            max-width: 600px;\r\n            margin: auto;\r\n            flex-grow: 1;\r\n          }\r\n          .edit-profile-container h2 {\r\n            color: #007bff;\r\n            margin-bottom: 20px;\r\n          }\r\n          .form-control,\r\n          .form-control-file {\r\n            margin-bottom: 15px;\r\n          }\r\n          .btn-block {\r\n            display: block;\r\n            width: 100%;\r\n          }\r\n          .text-primary {\r\n            color: #007bff !important;\r\n          }\r\n          .text-center {\r\n            text-align: center;\r\n          }\r\n          .shadow {\r\n            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);\r\n          }\r\n        `}</style>\r\n        <div className=\"container mt-4 edit-profile-container\">\r\n          <h2 className=\"text-center text-primary mb-4\">Edit Radio Profile</h2>\r\n          <form onSubmit={handleSubmit} className=\"shadow p-4 rounded\">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"name\">Name</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"name\"\r\n                className=\"form-control\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"url\">URL</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"url\"\r\n                className=\"form-control\"\r\n                value={url}\r\n                onChange={(e) => setUrl(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"companyName\">Company Name</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"companyName\"\r\n                className=\"form-control\"\r\n                value={companyName}\r\n                onChange={(e) => setCompanyName(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"email\">Email</label>\r\n              <input\r\n                type=\"email\"\r\n                id=\"email\"\r\n                className=\"form-control\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"logo\">Company Logo</label>\r\n              <input\r\n                type=\"file\"\r\n                id=\"logo\"\r\n                className=\"form-control-file\"\r\n                onChange={handleLogoChange}\r\n              />\r\n              {currentLogo && (\r\n                <div className=\"mt-2\">\r\n                  <img\r\n                    src={`/uploads/${currentLogo}`}\r\n                    alt=\"Company Logo\"\r\n                    className=\"img-thumbnail\"\r\n                    style={{ maxWidth: '200px' }}\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"subscriptionPlan\">Subscription Plan</label>\r\n              <select\r\n                id=\"subscriptionPlan\"\r\n                className=\"form-control\"\r\n                value={subscriptionPlan}\r\n                onChange={(e) => setSubscriptionPlan(e.target.value)}\r\n              >\r\n                <option value=\"1 Day\">1 Day</option>\r\n                <option value=\"1 Month\">1 Month</option>\r\n                <option value=\"3 Months\">3 Months</option>\r\n                <option value=\"6 Months\">6 Months</option>\r\n                <option value=\"1 Year\">1 Year</option>\r\n              </select>\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary btn-block\">Update Profile</button>\r\n            <button type=\"button\" className=\"btn btn-danger btn-block mt-2\" onClick={handleDelete}>Delete Profile</button>\r\n          </form>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditProfile;\r\n","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\AddProfile.jsx",["95"],[],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Footer from './Footer';\r\nimport Header from './Header';\r\n\r\nconst AddProfile = () => {\r\n  const [name, setName] = useState('');\r\n  const [url, setUrl] = useState('');\r\n  const [companyName, setCompanyName] = useState('');\r\n  const [subscriptionPlan, setSubscriptionPlan] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [logo, setLogo] = useState(null);\r\n  const [message, setMessage] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogoChange = (e) => {\r\n    setLogo(e.target.files[0]);\r\n  };\r\n\r\n  const handleAddProfile = async (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append('name', name);\r\n    formData.append('url', url);\r\n    formData.append('companyName', companyName);\r\n    formData.append('subscriptionPlan', subscriptionPlan);\r\n    formData.append('email', email);\r\n    formData.append('username', username);\r\n    formData.append('password', password);\r\n    if (logo) {\r\n      formData.append('logo', logo);\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post('/radiostreams', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      setMessage('Profile added successfully');\r\n      navigate('/dashboard');  // Redirect to the dashboard\r\n    } catch (error) {\r\n      setMessage('Error adding profile. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    <Header />\r\n    <div style={styles.pageContainer}>\r\n      <div style={styles.container}>\r\n        <h2 style={styles.heading}>Add Radio Profile</h2>\r\n        <form onSubmit={handleAddProfile} style={styles.form}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"name\">Name</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"name\"\r\n              className=\"form-control\"\r\n              style={styles.input}\r\n              value={name}\r\n              onChange={(e) => setName(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"url\">URL</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"url\"\r\n              className=\"form-control\"\r\n              style={styles.input}\r\n              value={url}\r\n              onChange={(e) => setUrl(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"companyName\">Company Name</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"companyName\"\r\n              className=\"form-control\"\r\n              style={styles.input}\r\n              value={companyName}\r\n              onChange={(e) => setCompanyName(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"subscriptionPlan\">Subscription Plan</label>\r\n            <select\r\n              id=\"subscriptionPlan\"\r\n              className=\"form-control\"\r\n              style={styles.input}\r\n              value={subscriptionPlan}\r\n              onChange={(e) => setSubscriptionPlan(e.target.value)}\r\n              required\r\n            >\r\n              <option value=\"\">Select Plan</option>\r\n              <option value=\"1 Day\">1 Day</option>\r\n              <option value=\"1 Month\">1 Month</option>\r\n              <option value=\"3 Months\">3 Months</option>\r\n              <option value=\"6 Months\">6 Months</option>\r\n              <option value=\"1 Year\">1 Year</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"email\">Email</label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"email\"\r\n              className=\"form-control\"\r\n              style={styles.input}\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"username\">Username</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"username\"\r\n              className=\"form-control\"\r\n              style={styles.input}\r\n              value={username}\r\n              onChange={(e) => setUsername(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"password\"\r\n              className=\"form-control\"\r\n              style={styles.input}\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"logo\">Company Logo</label>\r\n            <input\r\n              type=\"file\"\r\n              id=\"logo\"\r\n              className=\"form-control-file\"\r\n              style={styles.fileInput}\r\n              onChange={handleLogoChange}\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary btn-block\" style={styles.button}>Add Profile</button>\r\n        </form>\r\n        {message && <p style={styles.message}>{message}</p>}\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  pageContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    minHeight: '100vh'\r\n  },\r\n  container: {\r\n    backgroundColor: '#f8f9fa',\r\n    padding: '20px',\r\n    borderRadius: '8px',\r\n    boxShadow: '0 0 15px rgba(0, 0, 0, 0.1)',\r\n    maxWidth: '600px',\r\n    margin: '0 auto',\r\n    flexGrow: 1\r\n  },\r\n  heading: {\r\n    color: '#007bff',\r\n    marginBottom: '20px',\r\n    textAlign: 'center'\r\n  },\r\n  form: {\r\n    backgroundColor: '#fff',\r\n    borderRadius: '8px',\r\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.1)',\r\n    padding: '20px'\r\n  },\r\n  input: {\r\n    marginBottom: '15px',\r\n    width: '100%',\r\n    padding: '10px',\r\n    borderRadius: '4px',\r\n    border: '1px solid #ccc'\r\n  },\r\n  fileInput: {\r\n    marginBottom: '15px'\r\n  },\r\n  button: {\r\n    display: 'block',\r\n    width: '100%',\r\n    padding: '10px',\r\n    backgroundColor: '#007bff',\r\n    color: '#fff',\r\n    border: 'none',\r\n    borderRadius: '4px',\r\n    cursor: 'pointer'\r\n  },\r\n  message: {\r\n    textAlign: 'center',\r\n    color: '#007bff'\r\n  }\r\n};\r\n\r\nexport default AddProfile;\r\n","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\Login.jsx",["96"],[],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Footer from './Footer';\r\nimport Header from './Header';\r\n\r\nconst Login = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.post('/login', { username, password });\r\n      if (response.data.token) {\r\n        localStorage.setItem('token', response.data.token);\r\n        localStorage.setItem('user', JSON.stringify(response.data.user));\r\n        navigate(`/radio/${response.data.user.id}`);\r\n      } else {\r\n        setMessage('Invalid username or password');\r\n      }\r\n    } catch (error) {\r\n      setMessage('Error logging in. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    \r\n       <Header />\r\n    <div className=\"d-flex align-items-center justify-content-center vh-100\">\r\n      <div className=\"col-md-4\">\r\n        <div className=\"card p-4 shadow-sm\">\r\n          <h2 className=\"text-center text-primary mb-4\">Login</h2>\r\n          <form onSubmit={handleLogin}>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"username\">Username</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"username\"\r\n                className=\"form-control\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"password\">Password</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"password\"\r\n                className=\"form-control\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary btn-block mt-3\">Login</button>\r\n          </form>\r\n          {message && <p className=\"mt-3 text-center text-danger\">{message}</p>}\r\n        </div>\r\n      </div>\r\n    </div>\r\n     <Footer />\r\n    \r\n     </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  container: {\r\n    backgroundColor: '#f8f9fa',\r\n    padding: '20px',\r\n    borderRadius: '8px',\r\n    boxShadow: '0 0 15px rgba(0, 0, 0, 0.1)',\r\n    maxWidth: '400px',\r\n    margin: '0 auto'\r\n  },\r\n  heading: {\r\n    color: '#007bff',\r\n    marginBottom: '20px',\r\n    textAlign: 'center'\r\n  },\r\n  inputGroup: {\r\n    marginBottom: '15px'\r\n  },\r\n  input: {\r\n    width: '100%',\r\n    padding: '10px',\r\n    marginBottom: '10px',\r\n    borderRadius: '4px',\r\n    border: '1px solid #ccc'\r\n  },\r\n  button: {\r\n    display: 'block',\r\n    width: '100%',\r\n    padding: '10px',\r\n    backgroundColor: '#007bff',\r\n    color: '#fff',\r\n    border: 'none',\r\n    borderRadius: '4px',\r\n    cursor: 'pointer'\r\n  },\r\n  message: {\r\n    textAlign: 'center',\r\n    color: 'red'\r\n  }\r\n};\r\n\r\n\r\nexport default Login;\r\n","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\AdminLogin.jsx",["97","98"],[],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Footer from './Footer';\r\nimport Header from './Header';\r\n\r\nconst AdminLogin = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  // const handleLogin = async (e) => {\r\n  //   e.preventDefault();\r\n  //   try {\r\n  //     const response = await axios.post('/admin/login', { username, password });\r\n  //     if (response.data.token) {\r\n  //       localStorage.setItem('adminToken', response.data.token);\r\n  //       navigate('/dashboard');\r\n  //     } else {\r\n  //       setMessage('Invalid username or password');\r\n  //     }\r\n  //   } catch (error) {\r\n  //     setMessage('Error logging in. Please try again.');\r\n  //   }\r\n  // };\r\n\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.post('/admin/login', { username, password });\r\n      localStorage.setItem('adminToken', response.data.token);\r\n      navigate('/dashboard');\r\n    } catch (error) {\r\n      console.error('Login failed', error);\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div>\r\n       \r\n         <Header />\r\n    <div className=\"vh-100 d-flex align-items-center justify-content-center\">\r\n      <div className=\"col-md-4\">\r\n        <div className=\"card p-4 shadow-sm\">\r\n          <h2 className=\"text-center text-primary mb-4\">Admin Login</h2>\r\n          <form onSubmit={handleLogin}>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"username\">Username</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"username\"\r\n                className=\"form-control\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"password\">Password</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"password\"\r\n                className=\"form-control\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary btn-block mt-3\">Login</button>\r\n          </form>\r\n          {message && <p className=\"mt-3 text-center text-danger\">{message}</p>}\r\n        </div>\r\n      </div>\r\n    </div>\r\n     <Footer />\r\n    \r\n     </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n    container: {\r\n      backgroundColor: '#f8f9fa',\r\n      padding: '20px',\r\n      borderRadius: '8px',\r\n      boxShadow: '0 0 15px rgba(0, 0, 0, 0.1)',\r\n      maxWidth: '400px',\r\n      margin: '0 auto'\r\n    },\r\n    heading: {\r\n      color: '#007bff',\r\n      marginBottom: '20px',\r\n      textAlign: 'center'\r\n    },\r\n    inputGroup: {\r\n      marginBottom: '15px'\r\n    },\r\n    input: {\r\n      width: '100%',\r\n      padding: '10px',\r\n      marginBottom: '10px',\r\n      borderRadius: '4px',\r\n      border: '1px solid #ccc'\r\n    },\r\n    button: {\r\n      display: 'block',\r\n      width: '100%',\r\n      padding: '10px',\r\n      backgroundColor: '#007bff',\r\n      color: '#fff',\r\n      border: 'none',\r\n      borderRadius: '4px',\r\n      cursor: 'pointer'\r\n    },\r\n    message: {\r\n      textAlign: 'center',\r\n      color: 'red'\r\n    }\r\n  };\r\n  \r\n\r\nexport default AdminLogin;\r\n","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\LocalPlayer.jsx",["99","100","101","102","103","104","105","106"],[],"import React, { useRef, useState, useEffect } from 'react';\r\nimport { useParams, Link, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { differenceInHours } from 'date-fns';\r\nimport Footer from './Footer';\r\nimport Header from './Header';\r\n\r\nconst LocalPlayer = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const localAudioRef = useRef(null);\r\n  const alarmAudioRef = useRef(null);\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  const [volume, setVolume] = useState(1);\r\n  const [localTracks, setLocalTracks] = useState([]);\r\n  const [schedule, setSchedule] = useState([]);\r\n  const [newTrack, setNewTrack] = useState('');\r\n  const [newTime, setNewTime] = useState('');\r\n  const [alarmName, setAlarmName] = useState(''); // New state for alarm name\r\n  const [currentTime, setCurrentTime] = useState(new Date().toLocaleTimeString('en-GB', { hour12: false }));\r\n  const [currentLocalTrackIndex, setCurrentLocalTrackIndex] = useState(0);\r\n  const [profile, setProfile] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [playingTrack, setPlayingTrack] = useState(null);\r\n  const [highlightEndTime, setHighlightEndTime] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchProfile();\r\n    fetchSchedule();\r\n    loadLocalTracks();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const now = new Date().toLocaleTimeString('en-GB', { hour12: false });\r\n      setCurrentTime(now);\r\n      const scheduledTrack = schedule.find(track => track.time === now);\r\n      if (scheduledTrack) {\r\n        playScheduledTrack(scheduledTrack.track);\r\n      }\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [schedule]);\r\n\r\n  useEffect(() => {\r\n    if (localAudioRef.current) {\r\n      localAudioRef.current.addEventListener('ended', handleLocalTrackEnd);\r\n    }\r\n    return () => {\r\n      if (localAudioRef.current) {\r\n        localAudioRef.current.removeEventListener('ended', handleLocalTrackEnd);\r\n      }\r\n    };\r\n  }, [currentLocalTrackIndex, localTracks]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      preloadNextTrack();\r\n    }, 5000); // Check every 5 seconds to preload the next track\r\n    return () => clearInterval(interval);\r\n  }, [schedule, currentTime]);\r\n\r\n  const fetchProfile = async () => {\r\n    try {\r\n      const response = await axios.get(`/radiostreams/${id}`);\r\n      setProfile(response.data);\r\n    } catch (error) {\r\n      console.error('There was an error fetching the profile!', error);\r\n      setErrorMessage('Failed to fetch profile');\r\n    }\r\n  };\r\n\r\n  const fetchSchedule = async () => {\r\n    try {\r\n      const response = await axios.get(`/radio/${id}/schedule`);\r\n      setSchedule(response.data);\r\n    } catch (error) {\r\n      console.error('There was an error fetching the schedule!', error);\r\n      setErrorMessage('Failed to fetch schedule');\r\n    }\r\n  };\r\n\r\n  const handlePlay = () => {\r\n    playLocalTrack();\r\n  };\r\n\r\n  const handlePause = () => {\r\n    if (localAudioRef.current) {\r\n      localAudioRef.current.pause();\r\n    }\r\n  };\r\n\r\n  const handleMute = () => {\r\n    const audioElement = localAudioRef.current;\r\n    audioElement.muted = !audioElement.muted;\r\n    setIsMuted(!isMuted);\r\n  };\r\n\r\n  const handleVolumeChange = (event) => {\r\n    const newVolume = event.target.value;\r\n    localAudioRef.current.volume = newVolume;\r\n    setVolume(newVolume);\r\n  };\r\n\r\n  const handleLocalFiles = (event) => {\r\n    const files = Array.from(event.target.files);\r\n    setLocalTracks(files);\r\n    if (files.length > 0) {\r\n      setCurrentLocalTrackIndex(0);\r\n      saveLocalTracksToStorage(files);\r\n    }\r\n  };\r\n\r\n  const saveLocalTracksToStorage = (files) => {\r\n    const trackData = files.map(file => ({\r\n      name: file.name,\r\n      url: URL.createObjectURL(file)\r\n    }));\r\n    localStorage.setItem('localTracks', JSON.stringify(trackData));\r\n  };\r\n\r\n  const loadLocalTracks = () => {\r\n    const savedTracks = localStorage.getItem('localTracks');\r\n    if (savedTracks) {\r\n      const trackData = JSON.parse(savedTracks);\r\n      const fileObjects = trackData.map(data => new File([new Blob([])], data.name));\r\n      setLocalTracks(fileObjects);\r\n    }\r\n  };\r\n\r\n  const playScheduledTrack = (track) => {\r\n    if (!profile || profile.alarmBlocked || !localAudioRef.current || !alarmAudioRef.current) return;\r\n\r\n    setPlayingTrack(track);\r\n    fadeOut(localAudioRef.current, () => {\r\n      alarmAudioRef.current.src = `/uploads/tracks/${track}`;\r\n      console.log('Track source set to:', alarmAudioRef.current.src);\r\n      alarmAudioRef.current.load();\r\n      alarmAudioRef.current.oncanplaythrough = () => {\r\n        alarmAudioRef.current.play().catch(error => {\r\n          console.error('Error playing track:', error);\r\n        });\r\n      };\r\n      alarmAudioRef.current.onended = () => {\r\n        setPlayingTrack(null);\r\n        fadeIn(localAudioRef.current);\r\n        localAudioRef.current.play();\r\n      };\r\n\r\n      // Calculate the end time for highlighting\r\n      const trackDuration = alarmAudioRef.current.duration * 1000; // duration in milliseconds\r\n      const endTime = new Date().getTime() + trackDuration + 20000; // add 20 seconds\r\n      setHighlightEndTime(endTime);\r\n    });\r\n  };\r\n\r\n  const fadeOut = (audio, callback) => {\r\n    let volume = audio.volume;\r\n    const fadeAudio = setInterval(() => {\r\n      if (volume > 0.1) {\r\n        volume -= 0.1;\r\n        audio.volume = volume;\r\n      } else {\r\n        clearInterval(fadeAudio);\r\n        audio.volume = 0;\r\n        callback();\r\n      }\r\n    }, 200);\r\n  };\r\n\r\n  const fadeIn = (audio) => {\r\n    let volume = 0;\r\n    const fadeAudio = setInterval(() => {\r\n      if (volume < 0.9) {\r\n        volume += 0.1;\r\n        audio.volume = volume;\r\n      } else {\r\n        clearInterval(fadeAudio);\r\n        audio.volume = 1.0;\r\n      }\r\n    }, 200);\r\n  };\r\n\r\n  const preloadNextTrack = () => {\r\n    const now = new Date();\r\n    const futureTracks = schedule.filter(track => {\r\n      const [hours, minutes, seconds] = track.time.split(':').map(Number);\r\n      const trackTime = new Date();\r\n      trackTime.setHours(hours, minutes, seconds);\r\n      return trackTime > now;\r\n    });\r\n\r\n    if (futureTracks.length > 0) {\r\n      const nextTrack = futureTracks[0];\r\n      const nextTrackTime = new Date();\r\n      const [hours, minutes, seconds] = nextTrack.time.split(':').map(Number);\r\n      nextTrackTime.setHours(hours, minutes, seconds);\r\n\r\n      // Preload the track 60 seconds before the scheduled time\r\n      if (nextTrackTime - now <= 60000 && alarmAudioRef.current.src !== `/uploads/tracks/${nextTrack.track}`) {\r\n        alarmAudioRef.current.src = `/uploads/tracks/${nextTrack.track}`;\r\n        alarmAudioRef.current.load();\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleLocalTrackEnd = () => {\r\n    const nextIndex = (currentLocalTrackIndex + 1) % localTracks.length;\r\n    setCurrentLocalTrackIndex(nextIndex);\r\n    playLocalTrack(nextIndex);\r\n  };\r\n\r\n  const playLocalTrack = (index = currentLocalTrackIndex) => {\r\n    if (localTracks.length > 0 && localAudioRef.current) {\r\n      const trackData = localStorage.getItem('localTracks');\r\n      if (trackData) {\r\n        const tracks = JSON.parse(trackData);\r\n        localAudioRef.current.src = tracks[index].url;\r\n        localAudioRef.current.play().catch(error => {\r\n          console.error('Error playing local track:', error);\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAddTrack = () => {\r\n    const newSchedule = { track: newTrack, time: newTime, alarmName }; // Include alarm name\r\n    const updatedSchedule = [...schedule, newSchedule];\r\n    setSchedule(updatedSchedule);\r\n    axios.post(`/radio/${id}/schedule`, updatedSchedule)\r\n      .then(response => {\r\n        console.log('Schedule saved to server');\r\n      })\r\n      .catch(error => {\r\n        console.error('Error saving schedule to server', error);\r\n      });\r\n    setNewTrack('');\r\n    setNewTime('');\r\n    setAlarmName(''); // Clear alarm name input\r\n  };\r\n\r\n  const getDaysLeft = (expirationDate, createdDate, subscriptionPlan) => {\r\n    const now = new Date();\r\n    const created = new Date(createdDate);\r\n    const expiration = new Date(expirationDate);\r\n\r\n    let subscriptionDays = 0;\r\n    switch (subscriptionPlan) {\r\n      case '1 Day':\r\n        subscriptionDays = 1;\r\n        break;\r\n      case '1 Month':\r\n        subscriptionDays = 30;\r\n        break;\r\n      case '3 Months':\r\n        subscriptionDays = 90;\r\n        break;\r\n      case '6 Months':\r\n        subscriptionDays = 180;\r\n        break;\r\n      case '1 Year':\r\n        subscriptionDays = 365;\r\n        break;\r\n      default:\r\n        subscriptionDays = 0;\r\n    }\r\n\r\n    const hoursPassed = differenceInHours(now, created);\r\n    const daysPassed = Math.ceil(hoursPassed / 24);\r\n    const daysLeft = subscriptionDays - daysPassed;\r\n\r\n    return daysLeft;\r\n  };\r\n\r\n  const isNextToPlay = (scheduledTime) => {\r\n    const now = new Date();\r\n    const scheduledDate = new Date();\r\n    const [hours, minutes, seconds] = scheduledTime.split(':').map(Number);\r\n    scheduledDate.setHours(hours, minutes, seconds);\r\n    const differenceInMinutes = (scheduledDate - now) / 60000;\r\n    return differenceInMinutes >= 0 && differenceInMinutes <= 1;\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    navigate('/login');\r\n  };\r\n\r\n  if (!profile) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (profile.blocked) {\r\n    return (\r\n      <div className=\"container vh-100 d-flex flex-column align-items-center justify-content-center\">\r\n        <style>{`\r\n          .blocked-message {\r\n            color: red;\r\n            font-weight: bold;\r\n            font-size: 24px;\r\n          }\r\n        `}</style>\r\n        <div className=\"blocked-message\">Your profile is blocked.</div>\r\n        <div>{profile.companyName}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"d-flex flex-column vh-100\">\r\n        <div className=\"container flex-grow-1 d-flex flex-column\">\r\n          <style>{`\r\n            .local-player {\r\n              background-color: white;\r\n              border-radius: 8px;\r\n              padding: 20px;\r\n              box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);\r\n              width: 450px;\r\n            }\r\n            .local-player h1 {\r\n              font-size: 24px;\r\n              font-weight: bold;\r\n            }\r\n            .local-player img {\r\n              max-width: 100%;\r\n              height: auto;\r\n              padding: 10px;\r\n              box-sizing: border-box;\r\n            }\r\n            .local-player .form-control-range {\r\n              width: 100%;\r\n            }\r\n            .local-player .btn {\r\n              width: 100%;\r\n            }\r\n            .local-player .profile-info h2 {\r\n              margin-top: 20px;\r\n              font-size: 18px;\r\n              font-weight: bold;\r\n            }\r\n            .local-player .profile-info p {\r\n              font-size: 16px;\r\n            }\r\n            .local-player .list-group-item {\r\n              margin-top: 10px;\r\n              background-color: #f8f9fa;\r\n              border: 1px solid #dee2e6;\r\n              transition: background-color 0.3s, transform 0.3s;\r\n            }\r\n            .local-player .list-group-item:hover {\r\n              background-color: #e9ecef;\r\n              transform: scale(1.02);\r\n            }\r\n            .local-player .list-group-item.active {\r\n              background-color: #007bff;\r\n              color: white;\r\n            }\r\n            .local-player .list-group-item:last-child {\r\n              margin-bottom: 20px;\r\n            }\r\n            .action-buttons {\r\n              position: absolute;\r\n              top: 10px;\r\n              right: 10px;\r\n              display: flex;\r\n              gap: 10px;\r\n            }\r\n            .header {\r\n              text-align: center;\r\n              margin-bottom: 10px;\r\n            }\r\n            .header h1 {\r\n              font-size: 2rem;\r\n              margin-top: 20px;\r\n            }\r\n            .header h2 {\r\n              font-size: 1rem;\r\n              margin: 0;\r\n            }\r\n            .subscription-info {\r\n              text-align: center;\r\n              font-size: 1rem;\r\n              margin-top: 10px;\r\n            }\r\n            .card {\r\n              width: 100%;\r\n              background-color: #f8f9fa;\r\n              border: 1px solid #dee2e6;\r\n              box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);\r\n            }\r\n          `}</style>\r\n          <div className=\"action-buttons\">\r\n            <Link to={`/radio/${id}/profile`}>\r\n              <button className=\"btn btn-primary\">Go to Profile</button>\r\n            </Link>\r\n            <Link to={`/radio/${id}`}>\r\n              <button className=\"btn btn-info\">Go to Radio Player</button>\r\n            </Link>\r\n            <button className=\"btn btn-secondary\" onClick={handleLogout}>Logout</button>\r\n          </div>\r\n          <div className=\"header\">\r\n            <h1>{profile.name} - {profile.companyName}</h1>\r\n            <div className=\"subscription-info\">\r\n              <p>Subscription Plan: {profile.subscriptionPlan}<br></br>\r\n              Days left to expire: {getDaysLeft(profile.expirationDate, profile.createdDate, profile.subscriptionPlan)}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"row flex-grow-1 align-items-start\">\r\n            <div className=\"col-md-4 d-flex justify-content-center\">\r\n              <div className=\"local-player text-center\">\r\n                {profile.logo && <img src={`/uploads/${profile.logo}`} alt=\"Company Logo\" className=\"img-fluid mb-3\" />}\r\n                <audio ref={localAudioRef} preload=\"none\" style={{ display: 'block' }}></audio>\r\n                <audio ref={alarmAudioRef} preload=\"none\" style={{ display: 'none' }}></audio>\r\n                <div className=\"mb-3\">\r\n                  <button className=\"btn btn-danger btn-block mb-2\" onClick={handlePlay}>Play</button>\r\n                  <button className=\"btn btn-danger btn-block mb-2\" onClick={handlePause}>Pause</button>\r\n                  <button className=\"btn btn-danger btn-block mb-2\" onClick={handleMute}>{isMuted ? 'Unmute' : 'Mute'}</button>\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                  <input\r\n                    type=\"range\"\r\n                    className=\"form-control-range\"\r\n                    min=\"0\"\r\n                    max=\"1\"\r\n                    step=\"0.01\"\r\n                    value={volume}\r\n                    onChange={handleVolumeChange}\r\n                  />\r\n                </div>\r\n                <input\r\n                  type=\"file\"\r\n                  webkitdirectory=\"true\"\r\n                  multiple\r\n                  onChange={handleLocalFiles}\r\n                  accept=\".mp3\"\r\n                  className=\"form-control\"\r\n                />\r\n                {errorMessage && <p>{errorMessage}</p>}\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-4 d-flex justify-content-center\">\r\n              {profile.alarmBlocked ? (\r\n                <div className=\"card text-center p-4\">\r\n                  <div className=\"card-header\">\r\n                    <h2>Scheduled Tracks</h2>\r\n                  </div>\r\n                  <p style={{ color: 'red', fontWeight: 'bold' }}>The alarm system for this profile is currently blocked.</p>\r\n                </div>\r\n              ) : (\r\n                <div className=\"card text-center p-4\">\r\n                  <div className=\"card-header\">\r\n                    <h2>Scheduled Tracks</h2>\r\n                    <div className=\"scheduled-player\">\r\n                      <br />\r\n                      <audio ref={alarmAudioRef} controls preload=\"none\" style={{ width: '100%' }}></audio>\r\n                    </div>\r\n                  </div>\r\n                  <ul className=\"list-group list-group-flush\">\r\n                    {schedule.map((item, index) => {\r\n                      const isPlaying = item.track === playingTrack;\r\n                      const isHighlighted = highlightEndTime && new Date().getTime() < highlightEndTime;\r\n                      return (\r\n                        <li\r\n                          key={index}\r\n                          className={`list-group-item d-flex justify-content-between align-items-center ${isPlaying || isHighlighted ? 'bg-warning' : ''}`}\r\n                          style={isPlaying || isHighlighted ? { fontWeight: 'bold', backgroundColor: '#ffecb3' } : {}}\r\n                        >\r\n                          <span\r\n                            className=\"dot\"\r\n                            style={{\r\n                              height: '10px',\r\n                              width: '10px',\r\n                              backgroundColor: '#ff0000',\r\n                              borderRadius: '50%',\r\n                              display: 'inline-block',\r\n                              marginRight: '10px'\r\n                            }}\r\n                          ></span>\r\n                          {item.time} - {item.alarmName} {/* Display alarm name */}\r\n                          {/* - {item.track.split('-').slice(1).join('-')} */}\r\n                        </li>\r\n                      );\r\n                    })}\r\n                  </ul>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className=\"col-md-4 d-flex justify-content-center\">\r\n              <div className=\"card text-center p-4\">\r\n                <div className=\"card-header\">\r\n                  <h2>Local Tracks</h2>\r\n                </div>\r\n                <ul className=\"list-group list-group-flush\">\r\n                  {localTracks.map((track, index) => (\r\n                    <li\r\n                      key={index}\r\n                      onClick={() => setCurrentLocalTrackIndex(index)}\r\n                      className={`list-group-item ${index === currentLocalTrackIndex ? 'active' : ''}`}\r\n                    >\r\n                      {track.name}\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <br></br>\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LocalPlayer;\r\n","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\Footer.jsx",[],[],"C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\Header.jsx",["107","108"],[],"import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\nconst HeaderContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n  padding: 10px 20px;\r\n  background-color: #1825AA;\r\n  color: white;\r\n  height: 60px;\r\n\r\n  .logo {\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    img {\r\n      margin-left: 10px;\r\n      max-width: 50px;\r\n      height: auto;\r\n    }\r\n  }\r\n\r\n  .navigation {\r\n    display: flex;\r\n    align-items: center;\r\n    \r\n    a {\r\n      color: white;\r\n      text-decoration: none;\r\n      margin: 0 10px;\r\n      font-size: 16px;\r\n    }\r\n\r\n    button {\r\n      color: white;\r\n      background-color: transparent;\r\n      border: none;\r\n      cursor: pointer;\r\n      font-size: 16px;\r\n      margin-left: 20px;\r\n    }\r\n  }\r\n\r\n \r\n  \r\n`;\r\n\r\nconst Header = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    navigate('/login');\r\n  };\r\n\r\n  return (\r\n    <HeaderContainer>\r\n      <div className=\"logo\">\r\n        {/* <span>Radio Player</span>\r\n        <img src={`${process.env.PUBLIC_URL}/images/logo.jpg`} alt=\"Planet Entertainment Logo\" /> */}\r\n      </div>\r\n      {/* <div className=\"navigation\">\r\n        <Link to=\"/\">Home</Link>\r\n        <Link to=\"/about\">About</Link>\r\n        <Link to=\"/contact\">Contact</Link>\r\n        <button onClick={handleLogout}>Logout</button>\r\n      </div> */}\r\n    </HeaderContainer>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","C:\\Users\\kusha\\Desktop\\Radio Alarm System - Copy\\client\\src\\components\\History.jsx",[],[],{"ruleId":"109","severity":1,"message":"110","line":17,"column":10,"nodeType":"111","messageId":"112","endLine":17,"endColumn":16},{"ruleId":"109","severity":1,"message":"113","line":24,"column":24,"nodeType":"111","messageId":"112","endLine":24,"endColumn":39},{"ruleId":"109","severity":1,"message":"114","line":25,"column":10,"nodeType":"111","messageId":"112","endLine":25,"endColumn":24},{"ruleId":"115","severity":1,"message":"116","line":33,"column":6,"nodeType":"117","endLine":33,"endColumn":8,"suggestions":"118"},{"ruleId":"115","severity":1,"message":"119","line":45,"column":6,"nodeType":"117","endLine":45,"endColumn":38,"suggestions":"120"},{"ruleId":"115","severity":1,"message":"121","line":87,"column":6,"nodeType":"117","endLine":87,"endColumn":29,"suggestions":"122"},{"ruleId":"109","severity":1,"message":"123","line":227,"column":9,"nodeType":"111","messageId":"112","endLine":227,"endColumn":23},{"ruleId":"109","severity":1,"message":"124","line":246,"column":11,"nodeType":"111","messageId":"112","endLine":246,"endColumn":21},{"ruleId":"109","severity":1,"message":"125","line":4,"column":10,"nodeType":"111","messageId":"112","endLine":4,"endColumn":26},{"ruleId":"109","severity":1,"message":"126","line":15,"column":10,"nodeType":"111","messageId":"112","endLine":15,"endColumn":22},{"ruleId":"115","severity":1,"message":"127","line":30,"column":6,"nodeType":"117","endLine":30,"endColumn":13,"suggestions":"128"},{"ruleId":"115","severity":1,"message":"129","line":27,"column":6,"nodeType":"117","endLine":27,"endColumn":8,"suggestions":"130"},{"ruleId":"115","severity":1,"message":"131","line":20,"column":6,"nodeType":"117","endLine":20,"endColumn":8,"suggestions":"132"},{"ruleId":"109","severity":1,"message":"133","line":38,"column":13,"nodeType":"111","messageId":"112","endLine":38,"endColumn":21},{"ruleId":"109","severity":1,"message":"134","line":72,"column":7,"nodeType":"111","messageId":"112","endLine":72,"endColumn":13},{"ruleId":"109","severity":1,"message":"135","line":10,"column":19,"nodeType":"111","messageId":"112","endLine":10,"endColumn":29},{"ruleId":"109","severity":1,"message":"134","line":84,"column":7,"nodeType":"111","messageId":"112","endLine":84,"endColumn":13},{"ruleId":"115","severity":1,"message":"136","line":31,"column":6,"nodeType":"117","endLine":31,"endColumn":8,"suggestions":"137"},{"ruleId":"115","severity":1,"message":"119","line":43,"column":6,"nodeType":"117","endLine":43,"endColumn":16,"suggestions":"138"},{"ruleId":"115","severity":1,"message":"139","line":51,"column":23,"nodeType":"111","endLine":51,"endColumn":30},{"ruleId":"115","severity":1,"message":"140","line":54,"column":6,"nodeType":"117","endLine":54,"endColumn":43,"suggestions":"141"},{"ruleId":"115","severity":1,"message":"121","line":61,"column":6,"nodeType":"117","endLine":61,"endColumn":29,"suggestions":"142"},{"ruleId":"109","severity":1,"message":"123","line":226,"column":9,"nodeType":"111","messageId":"112","endLine":226,"endColumn":23},{"ruleId":"109","severity":1,"message":"124","line":245,"column":11,"nodeType":"111","messageId":"112","endLine":245,"endColumn":21},{"ruleId":"109","severity":1,"message":"143","line":275,"column":9,"nodeType":"111","messageId":"112","endLine":275,"endColumn":21},{"ruleId":"109","severity":1,"message":"144","line":3,"column":10,"nodeType":"111","messageId":"112","endLine":3,"endColumn":14},{"ruleId":"109","severity":1,"message":"145","line":54,"column":9,"nodeType":"111","messageId":"112","endLine":54,"endColumn":21},"no-unused-vars","'tracks' is assigned a value but never used.","Identifier","unusedVar","'setErrorMessage' is assigned a value but never used.","'userInteracted' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchRadioProfile', 'fetchSchedule', and 'fetchTracks'. Either include them or remove the dependency array.","ArrayExpression",["146"],"React Hook useEffect has a missing dependency: 'playScheduledTrack'. Either include it or remove the dependency array.",["147"],"React Hook useEffect has a missing dependency: 'preloadNextTrack'. Either include it or remove the dependency array.",["148"],"'handleAddTrack' is assigned a value but never used.","'expiration' is assigned a value but never used.","'differenceInDays' is defined but never used.","'alarmLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchRadioStreams' and 'navigate'. Either include them or remove the dependency array.",["149"],"React Hook useEffect has missing dependencies: 'fetchSchedule' and 'fetchTracks'. Either include them or remove the dependency array.",["150"],"React Hook useEffect has a missing dependency: 'fetchRadioProfile'. Either include it or remove the dependency array.",["151"],"'response' is assigned a value but never used.","'styles' is assigned a value but never used.","'setMessage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchProfile' and 'fetchSchedule'. Either include them or remove the dependency array.",["152"],["153"],"The ref value 'localAudioRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'localAudioRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has a missing dependency: 'handleLocalTrackEnd'. Either include it or remove the dependency array.",["154"],["155"],"'isNextToPlay' is assigned a value but never used.","'Link' is defined but never used.","'handleLogout' is assigned a value but never used.",{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"160","fix":"174"},"Update the dependencies array to be: [fetchRadioProfile, fetchSchedule, fetchTracks]",{"range":"175","text":"176"},"Update the dependencies array to be: [schedule, profile, currentTime, playScheduledTrack]",{"range":"177","text":"178"},"Update the dependencies array to be: [schedule, currentTime, preloadNextTrack]",{"range":"179","text":"180"},"Update the dependencies array to be: [fetchRadioStreams, navigate, token]",{"range":"181","text":"182"},"Update the dependencies array to be: [fetchSchedule, fetchTracks]",{"range":"183","text":"184"},"Update the dependencies array to be: [fetchRadioProfile]",{"range":"185","text":"186"},"Update the dependencies array to be: [fetchProfile, fetchSchedule]",{"range":"187","text":"188"},"Update the dependencies array to be: [playScheduledTrack, schedule]",{"range":"189","text":"190"},"Update the dependencies array to be: [currentLocalTrackIndex, handleLocalTrackEnd, localTracks]",{"range":"191","text":"192"},{"range":"193","text":"180"},[1421,1423],"[fetchRadioProfile, fetchSchedule, fetchTracks]",[1824,1856],"[schedule, profile, currentTime, playScheduledTrack]",[3090,3113],"[schedule, currentTime, preloadNextTrack]",[1091,1098],"[fetchRadioStreams, navigate, token]",[1058,1060],"[fetchSchedule, fetchTracks]",[722,724],"[fetchRadioProfile]",[1327,1329],"[fetchProfile, fetchSchedule]",[1730,1740],"[playScheduledTrack, schedule]",[2045,2082],"[currentLocalTrackIndex, handleLocalTrackEnd, localTracks]",[2292,2315]]